<?xml version="1.0"?>
<!--
 == $Id$
 ==
 == HISTORIQUE
 == 
 == VERSION : 27/03/2009 : 1.0 : Creation
 ==           16/09/2024 : 1.1 : (FLD) Update java 11
 ==
 == FIN-HISTORIQUE
 -->


<project name="OSOAA_UI" default="all" basedir="..">

    <property name="cobertura.dir" value="${basedir}/cobertura" />

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <condition property="is_windows">
        <os family="windows"/>
    </condition>

    <condition property="is_dev">
        <available file="${basedir}/tests/conf"/>
    </condition>

    <property name="version.required" value="1.8" />
    <available property="jdk11+" classname="java.util.ServiceLoader"/>
    <fail message="Require JDK 11 or higher" unless="jdk11+"/>

    <target name="version_check">
        <antversion property="version.running" />
        <fail message="FATAL ERROR:  The running Ant version is too old.">
            <condition>
                <not>
                    <antversion atleast="${version.required}" />
                </not>
            </condition>
        </fail>
    </target>

    <!-- =================================
          target: init 
         ================================= -->
	<target name="init" depends="version_check">
		
		<!-- Build time stamp -->	
		<tstamp>
			<format property="TODAY" pattern="yyyy.MM.dd.HHmmss" />
			<format property="TODAYversion" pattern="yyyyMMddHHmmss" />
		</tstamp>
				
		<property name="OSOAA.version" value="1.0.${TODAYversion}"></property>
				
		<!-- projects dependencies -->
		<!-- debug mode flag -->
		<property name="debug.mode" value="true"/>
		<property name="debug.level" value="lines,vars,source"/>
		<!-- all projects home -->
		<property name="plateform.home" location="../"/>
		<property name="plateform.name" value="OSOAA"/>
		<property name="plateform.version" value="1.0"/>
		<property name="CNES" value="CNES"/>
		<property name="CS" value="CSSI"/>
		<property name="OSOAA.UI.version" value="1.0"/>
								
		<!-- all projects directories structure -->
		<property name="dist.dir" location="dist" />
		<property name="gen.dir" location="gen" />
		<property name="bin.dir" location="bin" />
        <property name="inc.dir" location="inc" />
		<property name="lib.dir" location="lib" />
		<property name="idl.dir" location="idl" />
		<property name="idl.dir.name" value="idl" />
		<property name="models.dir" location="models" />
		<property name="xsd.dir.name" value="xsd" />
		<property name="src.dir" location="src" />
	    <property name="tu.dir" location="tu"/>
		<property name="tu.src.dir" location="tests" />
		
		<property name="obj.dir" location="obj_ant" />
        <property name="instrument.dir" location="obj_cobertura_ant" />
		<property name="doc.dir" location="doc" />
		<property name="javadoc.dir" value="javadoc" />
		<property name="stubs.dir" value="stubs" />
		<property name="deploy.dir" location="deploy" />
		<property name="distrib.dir" location="distrib"/>	
		<property name="distrib.stamp" location="${distrib.dir}/.${ant.project.name}-stamp"/>
		
		
		<property name="resource.ext" value="**/*.gif **/*.png" />
		<property name="javac.target" value="11" />
		<property name="javac.source" value="11" />
					
	</target>

	<!-- ================================= 
      target: setVersion 
     ================================= -->
	<target name="setVersion" depends="init">
		<copy tofile="${src.dir}/osoaa/usl/MainJFrame.java.templateVersion" file="${src.dir}/osoaa/usl/MainJFrame.java"/>
		<replace file="${src.dir}/osoaa/usl/MainJFrame.java" 
			token="@@OSOAA.version@@" 
			value="${OSOAA.version}" />
	</target>
	
	<target name="unSetVersion" depends="init">
		<delete file="${src.dir}/osoaa/usl/MainJFrame.java" />
		<move file="${src.dir}/osoaa/usl/MainJFrame.java.templateVersion" tofile="${src.dir}/osoaa/usl/MainJFrame.java"/>
	</target>
	
	<!-- ================================= 
          target: classpath 
         ================================= -->
	<target name="classpath" depends="init">
		<path id="compile-classpath">
			<fileset dir="${lib.dir}/">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<!-- ================================= 
          target: compile              
         ================================= -->
	<target name="compile" depends="init,classpath,setVersion,copy_resources">
		<mkdir dir="${obj.dir}" />
        <mkdir dir="${instrument.dir}" />
		<javac debug="${debug.mode}" debuglevel="${debug.level}" 
			classpathref="compile-classpath" srcdir="${src.dir}/" 
			destdir="${obj.dir}" source="${javac.source}" target="${javac.target}">
		</javac>
		<antcall target="unSetVersion"></antcall>
	</target>

    <target name="compile.tests" depends="init,classpath,setVersion,copy_resources">
        <mkdir dir="${obj.dir}" />
        <mkdir dir="${instrument.dir}" />
        <javac debug="${debug.mode}" debuglevel="${debug.level}"
               classpathref="compile-classpath" srcdir="${tu.src.dir}/"
               destdir="${obj.dir}" source="${javac.source}" target="${javac.target}">
        </javac>
    </target>

	<!-- ================================= 
          target: copy_resources              
         ================================= -->
	<target name="copy_resources" depends="init" description="copy resources files to obj directory">
		<copy todir="${obj.dir}" verbose="false">
			<fileset dir="${src.dir}" includes="${resource.ext}" />
		</copy>
        <copy file="log4j.properties" todir="${obj.dir}/osoaa"/>
	</target>

	<!-- ================================= 
          target: make-jar              
         ================================= -->
	<target name="make-jar" depends="init,compile" description="make project jar">
		<pathconvert property="jar-classpath" dirsep="/" pathsep=" " refid="compile-classpath">
			<map from="${plateform.home}" to="../.."/>
		</pathconvert>
		<jar destfile="${bin.dir}/OSOAAUI.jar" basedir="${obj.dir}">
			<manifest>
				<attribute Name="Specification-Title" value="${plateform.name}"/>
			    <attribute Name="Specification-Version" value="${plateform.version}"/>
			    <attribute Name="Specification-Vendor" value="${CNES}"/>
			    <attribute Name="Implementation-Title" value="${ant.project.name}"/>
			    <attribute Name="Implementation-Version" value="${OSOAA.UI.version} - b-${TODAYversion}"/>
			    <attribute Name="Implementation-Vendor" value="${CS}"/>
				<attribute Name="Main-Class" value="osoaa.Launcher"/>
				<attribute Name="Class-Path" value="../lib/forms-1.3.0.jar ../lib/miglayout15-swing.jar ../lib/log4j-1.2.17.jar"/>
			</manifest>
		</jar>
	</target>


	<!-- ================================= 
          target: clean              
         ================================= -->
	<target name="clean" depends="init">
		<delete quiet="true" includeEmptyDirs="true" failonerror="false">
			<fileset dir="${obj.dir}" includes="**/*" />
		</delete>
		<delete quiet="true" includeemptydirs="true" failonerror="false">
			<fileset dir="${bin.dir}" includes="**/*.jar" />
		</delete>
		<delete file="${basedir}/cobertura.ser" failonerror="false" />
	</target>

	
	<!-- ================================= 
          target: all              
         ================================= -->
	<target name="all" depends="clean,init,make-jar,make-distrib,make-last-distrib">
	</target>
	
	<target name="make-distrib" depends="init,unit-tests,make-jar">
		<mkdir dir="${dist.dir}"/>
		<echo message="done" />
		<property name="tar.dir.name" value="OSOAAUI-v${OSOAA.UI.version}.${TODAYversion}"></property>
		<property name="tar.dir.path" value="${dist.dir}/${tar.dir.name}"></property>
		
		<mkdir dir="${tar.dir.path}"/>
        <mkdir dir="${tar.dir.path}/tests"/>
        <mkdir dir="${tar.dir.path}/cobertura"/>
		
		<copy todir="${tar.dir.path}/lib">
			<fileset dir="${lib.dir}">
				<include name="forms*.jar"/>
                <include name="log4j*.jar"/>
                <include name="miglayout*.jar"/>
			</fileset>
		</copy>
			
		<copy todir="${tar.dir.path}/bin">
			<fileset dir="${bin.dir}">
				<include name="**"/>
			</fileset>
		</copy>
			
			
		<copy todir="${tar.dir.path}/src">
			<fileset dir="${src.dir}">
				<include name="**"/>
			</fileset>
		</copy>
		
		<copy todir="${tar.dir.path}/gen">
			<fileset dir="${gen.dir}">
				<include name="build.xml"/>
			</fileset>
		</copy>

        <copy todir="${tar.dir.path}/inc">
            <fileset dir="${inc.dir}">
                <include name="**"/>
            </fileset>
        </copy>

        <copy todir="${tar.dir.path}">
            <fileset dir="${basedir}">
                <include name="log4j.properties"/>
            </fileset>
        </copy>
		
		<tar destfile="dist/OSOAAUI-v${OSOAA.UI.version}.${TODAYversion}.tgz"
			basedir="${dist.dir}" 
			compression="gzip" >
			<include name="${tar.dir.name}/**"/>
		</tar>
		
		<copy file="dist/OSOAAUI-v${OSOAA.UI.version}.${TODAYversion}.tgz"  tofile="dist/OSOAAUI-last.tgz" overwrite="yes"/>
		
		<delete dir="${tar.dir.path}"></delete>
	</target>
	
	<target name="make-last-distrib" depends="init,unit-tests,make-jar">
			<mkdir dir="${dist.dir}"/>
			<echo message="done" />
			<property name="tara.dir.name" value="OSOAAUI-last"></property>
			<property name="tara.dir.path" value="${dist.dir}/${tara.dir.name}"></property>
			
			<mkdir dir="${tara.dir.path}"/>
            <mkdir dir="${tara.dir.path}/tests"/>
            <mkdir dir="${tara.dir.path}/cobertura"/>
			
			<copy todir="${tara.dir.path}/lib">
				<fileset dir="${lib.dir}">
                    <include name="forms*.jar"/>
                    <include name="log4j*.jar"/>
                    <include name="miglayout*.jar"/>
				</fileset>
			</copy>
				
			<copy todir="${tara.dir.path}/bin">
				<fileset dir="${bin.dir}">
					<include name="**"/>
				</fileset>
			</copy>
				
				
			<copy todir="${tara.dir.path}/src">
				<fileset dir="${src.dir}">
					<include name="**"/>
				</fileset>
			</copy>
			
			<copy todir="${tara.dir.path}/gen">
				<fileset dir="${gen.dir}">
					<include name="build.xml"/>
				</fileset>
			</copy>

            <copy todir="${tara.dir.path}/inc">
                <fileset dir="${inc.dir}">
                    <include name="**"/>
                </fileset>
            </copy>

            <copy todir="${tara.dir.path}">
                <fileset dir="${basedir}">
                    <include name="log4j.properties"/>
                </fileset>
            </copy>
			
			<tar destfile="dist/OSOAAUI-last.tgz"
				basedir="${dist.dir}" 
				compression="gzip" >
				<include name="${tara.dir.name}/**"/>
			</tar>
			
			<delete dir="${tara.dir.path}"></delete>
		</target>

    <target name="deploy" depends="make-last-distrib" unless="is_windows" if="is_dev">
        <property environment="env"></property>
        <delete dir="${env.HOME}/Run"></delete>
        <mkdir dir="${env.HOME}/Run"></mkdir>

        <untar src="${dist.dir}/OSOAAUI-last.tgz" dest="${env.HOME}/Run" compression="gzip"/>
        <copydir src="${basedir}/fic" dest="${env.HOME}/Run/OSOAAUI-last/fic"></copydir>
        <copydir src="${basedir}/exe" dest="${env.HOME}/Run/OSOAAUI-last/exe"></copydir>
        <copydir src="${basedir}/tests/conf_4" dest="${env.HOME}/Run/OSOAAUI-last/conf"></copydir>
        <chmod file="${env.HOME}/Run/OSOAAUI-last/exe/OSOAA_MAIN.exe" perm="ugo+x"/>
        <chmod file="${env.HOME}/Run/OSOAAUI-last/bin/runOSOAAUI.bash" perm="ugo+x"/>
        <chmod file="${env.HOME}/Run/OSOAAUI-last/bin/runOSOAAUI.csh" perm="ugo+x"/>
        <chmod file="${env.HOME}/Run/OSOAAUI-last/bin/runOSOAAUI.ksh" perm="ugo+x"/>
        <chmod file="${env.HOME}/Run/OSOAAUI-last/bin/runOSOAAUI.bat" perm="ugo+x"/>
    </target>

    <target name="unit-tests" depends="init, classpath, compile, compile.tests" unless="is_windows" if="is_dev" >
        <antcall target="ut1"></antcall>
        <junit printsummary="yes" haltonfailure="yes" fork="yes" failureproperty="test.failed">
            <env key="OSOAA_ROOT" value=".."/>

        <jvmarg value="-Dlog4j.configuration=file:./../log4j.properties"/>

        <classpath>
            <pathelement location="${lib.dir}/junit-4.8.2.jar"/>
            <pathelement location="${ant.home}/lib/ant-junit.jar"/>
            <pathelement path="${lib.dir}/forms-1.3.0.jar"/>
            <pathelement path="${lib.dir}/miglayout15-swing.jar"/>
            <pathelement path="${lib.dir}/jemmy.jar"/>
            <pathelement path="${lib.dir}/log4j-1.2.17.jar"/>
            <pathelement path="${lib.dir}/cglib-nodep-2.2.jar"/>
            <pathelement path="${lib.dir}/javassist-3.17.1-GA.jar"/>
            <pathelement path="${lib.dir}/mockito-all-1.9.5.jar"/>
            <pathelement path="${lib.dir}/objenesis-1.2.jar"/>
            <pathelement path="${lib.dir}/powermock-mockito-1.5-full.jar"/>
            <pathelement path="${lib.dir}/commons-io-2.4.jar"/>
            <pathelement path="${obj.dir}"/>
        </classpath>

        <test name="TestRunGui" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunGui">
            <formatter type="xml"/>
        </test>

        <test name="TestRunCommand" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunCommand">
            <formatter type="xml"/>
        </test>

        <!--
        <test name="TestRunLongCommand" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunLongCommand">
            <formatter type="xml"/>
        </test>
        -->

        <test name="TestRunCommandExclusion" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunCommandExclusion">
            <formatter type="xml"/>
        </test>



        </junit>
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>

    <target name="ut1" depends="init, classpath, compile, compile.tests" unless="is_windows" if="is_dev">
        <junit printsummary="yes" haltonfailure="yes" fork="yes" failureproperty="test.failed">
            <jvmarg value="-Dlog4j.configuration=file:./../log4j.properties"/>

            <classpath>
                <pathelement location="${lib.dir}/junit-4.8.2.jar"/>
                <pathelement location="${ant.home}/lib/ant-junit.jar"/>
                <pathelement path="${lib.dir}/forms-1.3.0.jar"/>
                <pathelement path="${lib.dir}/miglayout15-swing.jar"/>
                <pathelement path="${lib.dir}/jemmy.jar"/>
                <pathelement path="${lib.dir}/log4j-1.2.17.jar"/>
                <pathelement path="${lib.dir}/cglib-nodep-2.2.jar"/>
                <pathelement path="${lib.dir}/javassist-3.17.1-GA.jar"/>
                <pathelement path="${lib.dir}/mockito-all-1.9.5.jar"/>
                <pathelement path="${lib.dir}/objenesis-1.2.jar"/>
                <pathelement path="${lib.dir}/powermock-mockito-1.5-full.jar"/>
                <pathelement path="${lib.dir}/commons-io-2.4.jar"/>
                <pathelement path="${obj.dir}"/>
            </classpath>

            <test name="TestExceptionWindow" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestExceptionWindow">
                <formatter type="plain"/>
                <formatter type="xml"/>
            </test>

        </junit>
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>

    <target name="cover" depends="compile">
        <cobertura-instrument todir="${instrument.dir}">
            <ignore regex="org.apache.log4j.*" />
            <fileset dir="${obj.dir}">
                <include name="**/*.class" />
                <exclude name="**/*Test.class" />
            </fileset>
            <!--
            <fileset dir="${bin.dir}">
                <include name="OSOAAUI.jar" />
            </fileset>
            -->
        </cobertura-instrument>
    </target>

    <target name="unit-tests-cover" depends="init, classpath, compile, compile.tests, cover" unless="is_windows" if="is_dev" >
        <junit printsummary="yes" haltonfailure="yes" fork="yes" failureproperty="test.failed" >
            <env key="OSOAA_ROOT" value=".."/>

            <jvmarg value="-Dlog4j.configuration=file:./../log4j.properties"/>

            <classpath>
                <pathelement path="${cobertura.dir}/lib/asm-3.0.jar"/>
                <pathelement path="${cobertura.dir}/lib/asm-tree-3.0.jar"/>
                <pathelement path="${cobertura.dir}/lib/jakarta-oro-2.0.8.jar"/>
                <pathelement path="${cobertura.dir}/cobertura.jar"/>
                <pathelement location="${lib.dir}/junit-4.8.2.jar"/>
                <pathelement location="${ant.home}/lib/ant-junit.jar"/>
                <pathelement path="${lib.dir}/forms-1.3.0.jar"/>
                <pathelement path="${lib.dir}/miglayout15-swing.jar"/>
                <pathelement path="${lib.dir}/jemmy.jar"/>
                <pathelement path="${lib.dir}/log4j-1.2.17.jar"/>
                <pathelement path="${lib.dir}/cglib-nodep-2.2.jar"/>
                <pathelement path="${lib.dir}/javassist-3.17.1-GA.jar"/>
                <pathelement path="${lib.dir}/mockito-all-1.9.5.jar"/>
                <pathelement path="${lib.dir}/objenesis-1.2.jar"/>
                <pathelement path="${lib.dir}/powermock-mockito-1.5-full.jar"/>
                <pathelement path="${lib.dir}/commons-io-2.4.jar"/>
                <pathelement path="${instrument.dir}"/>
                <pathelement path="${obj.dir}"/>
            </classpath>

            <test name="TestRunGui" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunGui">
                <formatter type="xml"/>
            </test>

            <test name="TestRunCommand" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunCommand">
                <formatter type="xml"/>
            </test>

            <!--
            <test name="TestRunLongCommand" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunLongCommand">
                <formatter type="xml"/>
            </test>
            -->

            <test name="TestRunCommandExclusion" haltonfailure="no" todir="${basedir}/tests/results" outfile="TestRunCommandExclusion">
                <formatter type="xml"/>
            </test>

        </junit>
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>
</project>
